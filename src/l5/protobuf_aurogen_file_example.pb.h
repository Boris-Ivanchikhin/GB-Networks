// Это **часть** файла, сгенерированного protobuf.

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tag_provider.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tag_5fprovider_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tag_5fprovider_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
…
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
...
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tag_5fprovider_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tag_5fprovider_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tag_5fprovider_2eproto;
namespace our_system {
namespace tag_provider {
class Tag;
class TagDefaultTypeInternal;
extern TagDefaultTypeInternal _Tag_default_instance_;
class TagBriefInfo;
class TagBriefInfoDefaultTypeInternal;
extern TagBriefInfoDefaultTypeInternal _TagBriefInfo_default_instance_;
}  // namespace tag_provider
}  // namespace our_system
PROTOBUF_NAMESPACE_OPEN
template<> ::our_system::tag_provider::Tag* Arena::CreateMaybeMessage<::our_system::tag_provider::Tag>(Arena*);
template<> ::our_system::tag_provider::TagBriefInfo* Arena::CreateMaybeMessage<::our_system::tag_provider::TagBriefInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace our_system {
namespace tag_provider {

// ===================================================================

class TagBriefInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:our_system.tag_provider.TagBriefInfo) */ {
 public:
  inline TagBriefInfo() : TagBriefInfo(nullptr) {};
  virtual ~TagBriefInfo();

  TagBriefInfo(const TagBriefInfo& from);
  TagBriefInfo(TagBriefInfo&& from) noexcept
    : TagBriefInfo() {
    *this = ::std::move(from);
  }

  inline TagBriefInfo& operator=(const TagBriefInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TagBriefInfo& operator=(TagBriefInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TagBriefInfo& default_instance();
...
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tag_5fprovider_2eproto;
};
// -------------------------------------------------------------------

class Tag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:our_system.tag_provider.Tag) */ {
 public:
  inline Tag() : Tag(nullptr) {};
  virtual ~Tag();

  Tag(const Tag& from);
  Tag(Tag&& from) noexcept
    : Tag() {
    *this = ::std::move(from);
  }

  inline Tag& operator=(const Tag& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tag& operator=(Tag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tag& default_instance();

  enum ValueCase {
    kBoolVal = 20,
    kInt64Val = 21,
    kDoubleVal = 23,
    kStringVal = 24,
    kBinaryVal = 25,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tag* internal_default_instance() {
    return reinterpret_cast<const Tag*>(
               &_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Tag& a, Tag& b) {
    a.Swap(&b);
  }
  inline void Swap(Tag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tag* New() const final {
    return CreateMaybeMessage<Tag>(nullptr);
  }

  Tag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tag& from);
  void MergeFrom(const Tag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "our_system.tag_provider.Tag";
  }
  protected:
  explicit Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tag_5fprovider_2eproto);
    return ::descriptor_table_tag_5fprovider_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 2,
    kBriefInfoFieldNumber = 3,
    kIdFieldNumber = 1,
    kBoolValFieldNumber = 20,
    kInt64ValFieldNumber = 21,
    kDoubleValFieldNumber = 23,
    kStringValFieldNumber = 24,
    kBinaryValFieldNumber = 25,
  };
  // .google.protobuf.Timestamp timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .our_system.tag_provider.TagBriefInfo briefInfo = 3;
  bool has_briefinfo() const;
  private:
  bool _internal_has_briefinfo() const;
  public:
  void clear_briefinfo();
  const ::our_system::tag_provider::TagBriefInfo& briefinfo() const;
  ::our_system::tag_provider::TagBriefInfo* release_briefinfo();
  ::our_system::tag_provider::TagBriefInfo* mutable_briefinfo();
  void set_allocated_briefinfo(::our_system::tag_provider::TagBriefInfo* briefinfo);
  private:
  const ::our_system::tag_provider::TagBriefInfo& _internal_briefinfo() const;
  ::our_system::tag_provider::TagBriefInfo* _internal_mutable_briefinfo();
  public:
  void unsafe_arena_set_allocated_briefinfo(
      ::our_system::tag_provider::TagBriefInfo* briefinfo);
  ::our_system::tag_provider::TagBriefInfo* unsafe_arena_release_briefinfo();

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:
...
  // @@protoc_insertion_point(class_scope:our_system.tag_provider.Tag)
 private:
  class _Internal;
  void set_has_boolval();
  void set_has_int64val();
  void set_has_doubleval();
  void set_has_stringval();
  void set_has_binaryval();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  ::our_system::tag_provider::TagBriefInfo* briefinfo_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  union ValueUnion {
    ValueUnion() {}
    bool boolval_;
    ::PROTOBUF_NAMESPACE_ID::int64 int64val_;
    double doubleval_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stringval_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr binaryval_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tag_5fprovider_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TagBriefInfo

// string name = 1;
inline void TagBriefInfo::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TagBriefInfo::name() const {
  // @@protoc_insertion_point(field_get:our_system.tag_provider.TagBriefInfo.name)
  return _internal_name();
}
inline void TagBriefInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:our_system.tag_provider.TagBriefInfo.name)
}
inline std::string* TagBriefInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:our_system.tag_provider.TagBriefInfo.name)
  return _internal_mutable_name();
}
inline const std::string& TagBriefInfo::_internal_name() const {
  return name_.Get();
}

...

// -------------------------------------------------------------------

// Tag

// uint64 id = 1;
inline void Tag::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Tag::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Tag::id() const {
  // @@protoc_insertion_point(field_get:our_system.tag_provider.Tag.id)
  return _internal_id();
}
inline void Tag::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Tag::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:our_system.tag_provider.Tag.id)
}

// .google.protobuf.Timestamp timestamp = 2;
inline bool Tag::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool Tag::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Tag::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Tag::timestamp() const {
  // @@protoc_insertion_point(field_get:our_system.tag_provider.Tag.timestamp)
  return _internal_timestamp();
}
inline void Tag::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:our_system.tag_provider.Tag.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Tag::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Tag::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:our_system.tag_provider.Tag.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Tag::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Tag::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:our_system.tag_provider.Tag.timestamp)
  return _internal_mutable_timestamp();
}
inline void Tag::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:our_system.tag_provider.Tag.timestamp)
}

// .our_system.tag_provider.TagBriefInfo briefInfo = 3;
inline bool Tag::_internal_has_briefinfo() const {
  return this != internal_default_instance() && briefinfo_ != nullptr;
}

...

// bool boolVal = 20;
inline bool Tag::_internal_has_boolval() const {
  return value_case() == kBoolVal;
}
inline void Tag::set_has_boolval() {
  _oneof_case_[0] = kBoolVal;
}
inline void Tag::clear_boolval() {
  if (_internal_has_boolval()) {
    value_.boolval_ = false;
    clear_has_value();
  }
}


...

inline bool Tag::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Tag::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Tag::ValueCase Tag::value_case() const {
  return Tag::ValueCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tag_provider
}  // namespace our_system

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tag_5fprovider_2eproto



